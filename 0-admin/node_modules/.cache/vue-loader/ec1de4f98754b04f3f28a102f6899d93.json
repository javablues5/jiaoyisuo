{"remainingRequest":"C:\\Users\\Administrator\\Desktop\\交易所9.27\\0-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Administrator\\Desktop\\交易所9.27\\0-admin\\src\\views\\bussiness\\trade-robot\\index.vue?vue&type=style&index=0&id=7af33f78&lang=scss&scoped=true","dependencies":[{"path":"C:\\Users\\Administrator\\Desktop\\交易所9.27\\0-admin\\src\\views\\bussiness\\trade-robot\\index.vue","mtime":1698845798000},{"path":"C:\\Users\\Administrator\\Desktop\\交易所9.27\\0-admin\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\交易所9.27\\0-admin\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\交易所9.27\\0-admin\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\交易所9.27\\0-admin\\node_modules\\sass-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\交易所9.27\\0-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\交易所9.27\\0-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCi5saW5lLWNoYXJ0LA0KLmtsaW5lLWNoYXJ0IHsNCiAgaGVpZ2h0OiA4MDBweDsNCn0NCg=="},{"version":3,"sources":["index.vue"],"names":[],"mappingsu4BA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/views/bussiness/trade-robot","sourcesContent":["<template>\r\n  <div class=\"app-container\">\r\n    <SearchFormBox title=\"参数设置\">\r\n      <el-form\r\n        :model=\"form\"\r\n        :rules=\"rules\"\r\n        size=\"small\"\r\n        :inline=\"true\"\r\n        label-width=\"100px\"\r\n        :disabled=\"isPriview || isUpdate\"\r\n      >\r\n        <el-form-item label=\"交易对\" prop=\"symbol\">\r\n          <el-select\r\n            v-model=\"form.symbol\"\r\n            filterable\r\n            placeholder=\"请选择交易对\"\r\n            clearable\r\n          >\r\n            <el-option\r\n              v-for=\"(item, index) in symbolList\"\r\n              :key=\"index\"\r\n              :label=\"item.showSymbol\"\r\n              :value=\"item.symbol\"\r\n            />\r\n          </el-select>\r\n        </el-form-item>\r\n        <el-form-item label=\"控盘策略\" prop=\"model\">\r\n          <el-radio-group v-model=\"form.model\" @change=\"onModelChange\">\r\n            <el-radio-button\r\n              v-for=\"item in modelList\"\r\n              :key=\"item.label\"\r\n              :label=\"item.value\"\r\n            >\r\n              {{ item.label }}\r\n            </el-radio-button>\r\n          </el-radio-group>\r\n        </el-form-item>\r\n        <el-form-item label=\"控盘时间\" prop=\"time\" v-if=\"form.model != 0\">\r\n          <el-date-picker\r\n            v-model=\"form.time\"\r\n            type=\"datetime\"\r\n            placeholder=\"选择控盘时间\"\r\n            format=\"yyyy-MM-dd HH:mm\"\r\n            :picker-options=\"pickerOptions\"\r\n          >\r\n          </el-date-picker>\r\n        </el-form-item>\r\n\r\n        <el-form-item label=\"最大涨幅\" prop=\"increase\" v-if=\"form.model != 0\">\r\n          <el-input\r\n            v-model=\"form.increase\"\r\n            type=\"number\"\r\n            :min=\"0.001\"\r\n            placeholder=\"请输入最大涨幅\"\r\n          >\r\n            <template v-slot:append>%</template>\r\n          </el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"最大跌幅\" prop=\"decline\" v-if=\"form.model != 0\">\r\n          <el-input\r\n            v-model=\"form.decline\"\r\n            type=\"number\"\r\n            :min=\"0.001\"\r\n            placeholder=\"请输入最大跌幅\"\r\n          >\r\n            <template v-slot:append>%</template>\r\n          </el-input>\r\n        </el-form-item>\r\n        <template v-if=\"form.model != 0\">\r\n          <!-- <el-form-item label=\"控制粒度\" prop=\"granularity\">\r\n            <el-radio-group v-model=\"form.granularity\">\r\n              <el-radio-button\r\n                v-for=\"item in granularityList\"\r\n                :key=\"item.label\"\r\n                :label=\"item.value\"\r\n              >\r\n                {{ item.label }}\r\n              </el-radio-button>\r\n            </el-radio-group>\r\n          </el-form-item> -->\r\n          <el-form-item label=\"浮动比例\" prop=\"pricePencent\">\r\n            <el-input\r\n              v-model=\"form.pricePencent\"\r\n              type=\"number\"\r\n              :min=\"0.001\"\r\n              :max=\"100\"\r\n              placeholder=\"请输入价格浮动比例\"\r\n              @change=\"KLinePerview\"\r\n              style=\"width: 250px\"\r\n            >\r\n              <template v-slot:append>%</template>\r\n            </el-input>\r\n          </el-form-item>\r\n          <el-form-item\r\n            label=\"参考价格\"\r\n            prop=\"conPrice\"\r\n            v-if=\"isPriview || isUpdate\"\r\n          >\r\n            <el-input\r\n              v-model=\"form.conPrice\"\r\n              :disabled=\"form.conPrice > 0\"\r\n              type=\"number\"\r\n              :min=\"0.001\"\r\n              placeholder=\"请输入价格浮动比例\"\r\n            >\r\n            </el-input>\r\n          </el-form-item>\r\n          <el-row>\r\n            <el-col :span=\"24\">\r\n              <el-form-item>\r\n                <el-button\r\n                  type=\"warning\"\r\n                  icon=\"el-icon-edit\"\r\n                  size=\"mini\"\r\n                  plain\r\n                  @click=\"\r\n                    drawLine();\r\n                    KLinePerview();\r\n                  \"\r\n                  v-if=\"form.model != 0\"\r\n                >\r\n                  绘制\r\n                </el-button>\r\n                <!-- <el-button\r\n                  icon=\"el-icon-view\"\r\n                  size=\"mini\"\r\n                  @click=\"KLinePerview()\"\r\n                  v-if=\"form.model != 0\"\r\n                >\r\n                  预览\r\n                </el-button> -->\r\n\r\n                <el-button\r\n                  type=\"primary\"\r\n                  icon=\"el-icon-check\"\r\n                  size=\"mini\"\r\n                  @click=\"submit\"\r\n                  :disabled=\"isPriview\"\r\n                >\r\n                  保存\r\n                </el-button>\r\n              </el-form-item>\r\n            </el-col>\r\n          </el-row>\r\n        </template>\r\n      </el-form>\r\n    </SearchFormBox>\r\n\r\n    <div v-if=\"form.model == 0\">\r\n      <!-- 跟随型 -->\r\n      <TableContentBox :title=\"modelInfo.label\">\r\n        <el-form :disabled=\"isPriview\">\r\n          <el-row>\r\n            <el-col :span=\"6\">\r\n              <el-form-item label=\"浮动价格\" prop=\"conPrice\">\r\n                <el-tooltip\r\n                  effect=\"dark\"\r\n                  placement=\"bottom-start\"\r\n                  content=\"当前币种价格 + 浮动价格\"\r\n                >\r\n                  <i class=\"el-icon-info\" />\r\n                </el-tooltip>\r\n                <el-input\r\n                  v-model=\"form.conPrice\"\r\n                  :min=\"0\"\r\n                  type=\"number\"\r\n                  placeholder=\"请输入浮动价格\"\r\n                >\r\n                  <template v-slot:append>USDT</template>\r\n                </el-input>\r\n              </el-form-item>\r\n            </el-col>\r\n\r\n            <!-- <el-col :span=\"6\" :offset=\"2\">\r\n              <el-form-item label=\"浮动比例\" prop=\"pricePencent\">\r\n                <el-input\r\n                  v-model=\"form.pricePencent\"\r\n                  type=\"number\"\r\n                  placeholder=\"请输入价格浮动比例\"\r\n                >\r\n                  <template v-slot:append>%</template>\r\n                </el-input>\r\n              </el-form-item>\r\n            </el-col> -->\r\n          </el-row>\r\n        </el-form>\r\n        <el-button\r\n          type=\"primary\"\r\n          icon=\"el-icon-check\"\r\n          size=\"mini\"\r\n          @click=\"submit\"\r\n          :disabled=\"isPriview\"\r\n        >\r\n          保存\r\n        </el-button>\r\n      </TableContentBox>\r\n    </div>\r\n    <div v-else>\r\n      <!-- 线 图表 -->\r\n      <TableContentBox :title=\"modelInfo.label\">\r\n        <el-row>\r\n          <div class=\"line-chart\" ref=\"lineChartRef\"></div>\r\n        </el-row>\r\n      </TableContentBox>\r\n\r\n      <!-- K线 图表 -->\r\n      <TableContentBox title=\"趋势预览\" style=\"margin-top: 15px\">\r\n        <el-row>\r\n          <div class=\"kline-chart\" ref=\"KLineChartRef\"></div>\r\n        </el-row>\r\n      </TableContentBox>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport TimeFormater from \"time-formater\";\r\nimport * as echarts from \"echarts\";\r\nimport {\r\n  generateTimeList,\r\n  getKLineYRandomList,\r\n  distributeMinutes,\r\n  getMockKLineOption,\r\n} from \"./util\";\r\nimport { _toFixed, _div, _mul } from \"./decimal\";\r\nimport {\r\n  getSymbolListApi,\r\n  saveTradeRobotApi,\r\n  getDetailApi,\r\n  updateDetailApi,\r\n} from \"@/api/bussiness/trade-robot.js\";\r\nexport default {\r\n  name: \"TradeRobot\",\r\n\r\n  data() {\r\n    return {\r\n      detail: null,\r\n      // 历史id\r\n      id: null,\r\n      // 类型 priview update\r\n      type: null,\r\n      // 控盘策略列表\r\n      modelList: [\r\n        { value: 0, label: \"跟随型趋势\" },\r\n        // { value: 1, label: \"自定义趋势\" },\r\n        { value: 2, label: \"秒杀型趋势\" },\r\n      ],\r\n      // 币种列表\r\n      symbolList: [],\r\n      // 表单\r\n      form: {},\r\n      // 表单校验\r\n      rules: {\r\n        symbol: { required: true, message: \"币种不能为空\", trigger: \"blur\" },\r\n      },\r\n      // 总分钟数\r\n      totalMinutes: 0,\r\n      // 基础粒度\r\n      granularity: 15,\r\n      // X轴时间\r\n      xTimeScaleList: [],\r\n      // Y轴计算比例\r\n      yRandomList: [],\r\n      // 图表实例\r\n      lineChart: null,\r\n      // 图表实例\r\n      KLineChart: null,\r\n      /**\r\n       * k线预处理数据\r\n       */\r\n      klineYRandomList: [],\r\n      /**\r\n       * k线数据\r\n       */\r\n      klineMockYData: [],\r\n\r\n      pickerOptions: {\r\n        //设置禁用状态，参数为当前日期\r\n        disabledDate(time) {\r\n          return time.getTime() < new Date().getTime() - 86400000; //  - 86400000是否包括当天\r\n        },\r\n      },\r\n    };\r\n  },\r\n  computed: {\r\n    /**\r\n     * 策略信息\r\n     */\r\n    modelInfo() {\r\n      return this.modelList.find(\r\n        (elem) => elem.value == (this.form?.model || 0)\r\n      );\r\n    },\r\n    /**\r\n     * 控制粒度列表\r\n     */\r\n    granularityList() {\r\n      let tempList = [\r\n        { value: 15, label: \"15分钟\" },\r\n        { value: 30, label: \"30分钟\" },\r\n        { value: 60, label: \"1小时\" },\r\n        { value: 120, label: \"2小时\" },\r\n        { value: 240, label: \"4小时\" },\r\n      ];\r\n\r\n      if (this.form.model == 2) {\r\n        // 秒杀型趋势\r\n        tempList = [\r\n          { value: 1, label: \"1分钟\" },\r\n          { value: 5, label: \"5分钟\" },\r\n          { value: 10, label: \"10分钟\" },\r\n          { value: 15, label: \"15分钟\" },\r\n        ];\r\n      }\r\n      return tempList;\r\n    },\r\n    /**\r\n     * 是否为预览\r\n     */\r\n    isPriview() {\r\n      return this.type == \"priview\";\r\n    },\r\n    /**\r\n     * 是否为修改\r\n     */\r\n    isUpdate() {\r\n      return this.type == \"update\";\r\n    },\r\n  },\r\n  async mounted() {\r\n    await this.getSymbolList();\r\n    this.id = this.$route.query.id || null;\r\n    this.type = this.$route.query.type || null;\r\n    if (this.id) {\r\n      this.getDetail();\r\n    } else {\r\n      this.reset();\r\n      window.addEventListener(\"resize\", this.resize);\r\n    }\r\n  },\r\n  methods: {\r\n    /**\r\n     * 获取数据详情\r\n     */\r\n    async getDetail() {\r\n      const res = await getDetailApi(this.id);\r\n      if (res.code == 200) {\r\n        console.log(res);\r\n        let tempData = res.data;\r\n        this.detail = tempData;\r\n        if (!this.symbolList.some((elem) => elem.symbol == tempData.symbol)) {\r\n          tempData.symbol = \"\";\r\n        }\r\n        this.form = {\r\n          decline: tempData.decline,\r\n          increase: tempData.increase,\r\n          granularity: tempData.granularity,\r\n          model: tempData.model,\r\n          conPrice: tempData.conPrice,\r\n          pricePencent: tempData.pricePencent,\r\n          symbol: tempData.symbol,\r\n          time: new Date(tempData.beginTime),\r\n        };\r\n        this.klineMockYData = tempData.botInfoList.map((elem) => {\r\n          this.klineYRandomList[elem.x] = elem.y;\r\n          return [elem.open, elem.close, elem.high, elem.low];\r\n        });\r\n        this.granularity = this.granularityList[0].value;\r\n\r\n        if (tempData.model == 2) {\r\n          this.totalMinutes = 60;\r\n          this.xTimeScaleList = generateTimeList(\r\n            this.form.time,\r\n            this.granularity,\r\n            this.totalMinutes\r\n          );\r\n        }\r\n        this.yRandomList = JSON.parse(tempData.lineChartData);\r\n        this.drawLine();\r\n        this.drawKLine();\r\n        this.KLinePerview({\r\n          series: [{ data: this.klineMockYData }],\r\n          xAxis: this.xTimeScaleList,\r\n        });\r\n      }\r\n    },\r\n    /**\r\n     * 提交\r\n     */\r\n    async submit() {\r\n      console.log(\"表单数据\", this.form);\r\n      console.log(\"K线数据 open, close, high, low\", this.klineMockYData);\r\n      console.log(\r\n        \"K线数据 时间\",\r\n        this.klineYRandomList,\r\n        this.form.time.getTime()\r\n      );\r\n      let tempBotInfoList = [];\r\n      this.form.time.setSeconds(0);\r\n      this.form.time.setMilliseconds(0);\r\n\r\n      let nowDate = new Date();\r\n      nowDate.setSeconds(0);\r\n      nowDate.setMilliseconds(0);\r\n\r\n      let time = this.form.time.getTime();\r\n      // if (\r\n      //   [2].includes(this.form.model) &&\r\n      //   time < nowDate.getTime() + 120 * 1000\r\n      // ) {\r\n      //   this.$modal.msgError(\"请将控盘时间设置为 当前时间 + 两分钟\");\r\n      //   return;\r\n      // }\r\n      if ([1, 2].includes(this.form.model)) {\r\n        tempBotInfoList = Object.keys(this.klineYRandomList).map(\r\n          (elem, index) => {\r\n            return {\r\n              x: elem,\r\n              y: `${this.klineYRandomList[index]}`,\r\n\r\n              dateTime: time + elem * this.form.granularity * 60 * 1000,\r\n              open: this.klineMockYData[index][0],\r\n              close: this.klineMockYData[index][1],\r\n              high: this.klineMockYData[index][2],\r\n              low: this.klineMockYData[index][3],\r\n            };\r\n          }\r\n        );\r\n      }\r\n      let params = {\r\n        // 最大跌幅\r\n        decline: this.form.pricePencent,\r\n        // 最大涨幅\r\n        increase: this.form.pricePencent,\r\n        // 控制粒度\r\n        granularity: \"\",\r\n        // 控盘策略 0 跟随型 1 自定义 2 秒杀型\r\n        model: this.form.model,\r\n        // 浮动价格  model为 0 时有效\r\n        conPrice: this.form.conPrice,\r\n        // 浮动比例\r\n        pricePencent: this.form.pricePencent,\r\n        // 交易对\r\n        symbol: this.form.symbol,\r\n        // 开始时间\r\n        beginTime: time,\r\n        // 结束时间\r\n        endTime: \"\",\r\n        // 趋势列表\r\n        botInfoList: [\r\n          {\r\n            close: 0,\r\n            dateTime: time,\r\n            high: 0,\r\n            low: 0,\r\n            open: 0,\r\n            x: \"0\",\r\n            y: \"0\",\r\n          },\r\n        ],\r\n        // 图表刻度数据\r\n        lineChartData: \"[]\",\r\n      };\r\n      if ([1, 2].includes(this.form.model)) {\r\n        // 最大跌幅\r\n        params.decline = this.form.decline;\r\n        // 最大涨幅\r\n        params.increase = this.form.increase;\r\n        // 控制粒度\r\n        params.granularity = this.form.granularity;\r\n        // 开始时间\r\n        params.beginTime = tempBotInfoList[0].dateTime;\r\n        // 结束时间\r\n        params.endTime = tempBotInfoList[tempBotInfoList.length - 1].dateTime;\r\n        // 趋势列表\r\n        params.botInfoList = tempBotInfoList;\r\n        // 图表刻度数据\r\n        params.lineChartData = JSON.stringify(this.yRandomList);\r\n      }\r\n      console.log(params);\r\n      if (this.form.symbol == \"\") {\r\n        this.$modal.msgError(\"交易对不能为空\");\r\n        return false;\r\n      }\r\n      if (this.id) {\r\n        // 修改\r\n        params.id = this.id;\r\n        const res = await updateDetailApi(params);\r\n        if (res.code == 200) {\r\n          this.$modal.msgSuccess(res.msg);\r\n          // 控盘策略 0 跟随型 1 自定义 2 秒杀型\r\n          if (this.form.model == 0) {\r\n            this.form.conPrice = \"\";\r\n          } else {\r\n            this.reset();\r\n          }\r\n        } else {\r\n          this.$modal.msgError(res.msg);\r\n        }\r\n      } else {\r\n        const res = await saveTradeRobotApi(params);\r\n        if (res.code == 200) {\r\n          this.$modal.msgSuccess(res.msg);\r\n          // 控盘策略 0 跟随型 1 自定义 2 秒杀型\r\n          if (this.form.model == 0) {\r\n            this.form.conPrice = \"\";\r\n          } else {\r\n            this.reset();\r\n          }\r\n        } else {\r\n          this.$modal.msgError(res.msg);\r\n        }\r\n      }\r\n    },\r\n    /**\r\n     * 监听粒度改变\r\n     */\r\n    onModelChange(val) {\r\n      // console.log(\"监听粒度改变\", val);\r\n      if ([1, 2].includes(val)) {\r\n        this.granularity = this.granularityList[0].value;\r\n        this.form.granularity = this.granularity;\r\n        this.pricePencent = 5;\r\n      }\r\n\r\n      if (val == 2) {\r\n        this.totalMinutes = 60;\r\n        this.xTimeScaleList = generateTimeList(\r\n          this.form.time,\r\n          this.granularity,\r\n          this.totalMinutes\r\n        );\r\n        this.drawLine();\r\n        this.drawKLine();\r\n        this.KLinePerview();\r\n      } else if (val == 1) {\r\n        this.totalMinutes = 1 * 24 * 60;\r\n        this.xTimeScaleList = generateTimeList(\r\n          this.form.time,\r\n          this.granularity\r\n        );\r\n        this.drawLine();\r\n        this.drawKLine();\r\n        this.KLinePerview();\r\n      } else if (val == 0) {\r\n        this.resetForm(() => {\r\n          this.form.model = val;\r\n        });\r\n      }\r\n    },\r\n    /**\r\n     * 充值表单\r\n     */\r\n    resetForm(callback) {\r\n      this.form = {\r\n        // 交易对\r\n        symbol: \"\",\r\n        // 模式\r\n        model: 2,\r\n        // 模拟时间\r\n        time: new Date(),\r\n        // 最大涨幅\r\n        increase: 5,\r\n        // 最大跌幅\r\n        decline: 5,\r\n        // 控制粒度\r\n        granularity: 15,\r\n        // 浮动价格\r\n        conPrice: 0,\r\n        // 价格浮动比例\r\n        pricePencent: 5,\r\n      };\r\n      callback && callback();\r\n    },\r\n    /**\r\n     * 重置表单\r\n     */\r\n    reset() {\r\n      if (this.lineChart) {\r\n        this.lineChart.dispose();\r\n        this.lineChart = null;\r\n      }\r\n      if (this.KLineChart) {\r\n        this.KLineChart.dispose();\r\n        this.KLineChart = null;\r\n      }\r\n      this.resetForm();\r\n      this.id = null;\r\n      this.type = null;\r\n      this.detail = null;\r\n      // 总分钟数\r\n      this.totalMinutes = 1 * 24 * 60;\r\n      // 基础粒度\r\n      this.granularity = 15;\r\n      // X轴时间\r\n      this.xTimeScaleList = [];\r\n      // Y轴计算比例\r\n      this.yRandomList = [];\r\n      // K线计算曲线比例\r\n      this.klineYRandomList = [];\r\n      // K线模拟数据\r\n      this.klineMockYData = [];\r\n      this.onModelChange(this.form.model);\r\n    },\r\n    /**\r\n     * 预览\r\n     */\r\n    KLinePerview(option) {\r\n      if (!option) {\r\n        option = getMockKLineOption(\r\n          this.xTimeScaleList,\r\n          this.klineYRandomList,\r\n          this.form.pricePencent\r\n        );\r\n      }\r\n      console.log(option);\r\n      this.klineMockYData = option.series[0].data || [];\r\n      this.KLineChart && this.KLineChart.setOption(option);\r\n    },\r\n    /**\r\n     * 绘制 KLineChart\r\n     */\r\n    drawKLine() {\r\n      if (!this.KLineChart && this.$refs.KLineChartRef) {\r\n        this.KLineChart = echarts.init(this.$refs.KLineChartRef);\r\n      }\r\n      let options = {\r\n        grid: {\r\n          left: 30,\r\n          right: 50,\r\n          top: 10,\r\n          bottom: 30,\r\n        },\r\n        xAxis: {\r\n          type: \"category\",\r\n          name: \"时间\",\r\n          boundaryGap: false,\r\n          axisLabel: {\r\n            fontSize: 8,\r\n            formatter: (params) => {\r\n              return TimeFormater(Number(params)).format(\"HH:mm\");\r\n            },\r\n          },\r\n          data: this.xTimeScaleList,\r\n        },\r\n        yAxis: {\r\n          //   min: 0 - this.form.decline,\r\n          //   max: this.form.increase,\r\n          name: \"价格\",\r\n          type: \"value\",\r\n          axisLine: { onZero: false },\r\n          axisLabel: {\r\n            fontSize: 8,\r\n          },\r\n          splitLine: {\r\n            show: true,\r\n            lineStyle: {\r\n              color: [\"#CCC\"],\r\n              width: 1,\r\n              type: \"dashed\",\r\n            },\r\n          },\r\n        },\r\n        series: [\r\n          {\r\n            type: \"candlestick\",\r\n            itemStyle: {\r\n              color: \"#4bbd83\", // 绿色（涨）\r\n              color0: \"#d62548\", // 红色（跌）\r\n              borderColor: \"#4bbd83\", // 绿色（涨）\r\n              borderColor0: \"#d62548\", // 红色（跌）\r\n              borderColorDoji: null,\r\n              borderWidth: \"1\",\r\n            },\r\n\r\n            data: [],\r\n          },\r\n        ],\r\n      };\r\n      this.KLineChart && this.KLineChart.setOption(options);\r\n    },\r\n    /**\r\n     * 绘制 lineChart\r\n     */\r\n    drawLine() {\r\n      if (this.lineChart) {\r\n        this.lineChart.dispose();\r\n        this.lineChart = null;\r\n      }\r\n      if (this.$refs.lineChartRef) {\r\n        this.lineChart = echarts.init(this.$refs.lineChartRef);\r\n      }\r\n      // 根据控制粒度计算X轴时间刻度\r\n      if (!this.type || this.detail?.granularity != this.form.granularity) {\r\n        // 获取当前粒度X数组\r\n        let xTimeScaleList = distributeMinutes(\r\n          this.totalMinutes,\r\n          this.form.granularity\r\n        );\r\n        // 初始化默认Y数组\r\n        this.yRandomList = xTimeScaleList.map((elem, index) => {\r\n          return [xTimeScaleList[index] / this.granularity, 0];\r\n        });\r\n        // 获取模拟K线数据\r\n        this.klineYRandomList = getKLineYRandomList(\r\n          this.xTimeScaleList,\r\n          this.yRandomList\r\n        ).slice(0, this.xTimeScaleList.length);\r\n      }\r\n      // 计算options\r\n      let options = {\r\n        backgroundColor: \"#fff\",\r\n        graphic: null,\r\n        title: {\r\n          text: \"\",\r\n          subtext: \"\",\r\n          x: \"center\",\r\n        },\r\n        interval: 1,\r\n        grid: {\r\n          left: 30,\r\n          right: 50,\r\n          top: 10,\r\n          bottom: 30,\r\n          containLabel: false, //grid 区域是否包含坐标轴的刻度标签\r\n        },\r\n        tooltip: {\r\n          trigger: \"axis\",\r\n          axisPointer: {\r\n            type: \"cross\",\r\n            label: {\r\n              formatter: (params) => {\r\n                if (params.axisDimension == \"x\") {\r\n                  return TimeFormater(Number(params.value)).format(\r\n                    \"YYYY-MM-DD HH:mm\"\r\n                  );\r\n                } else if (params.axisDimension == \"y\") {\r\n                  return _toFixed(params.value, 4);\r\n                }\r\n              },\r\n            },\r\n            lineStyle: {\r\n              color: \"#3B91FF\",\r\n            },\r\n          },\r\n        },\r\n        xAxis: {\r\n          type: \"category\",\r\n          name: \"时间\",\r\n          boundaryGap: false,\r\n          axisLabel: {\r\n            fontSize: 8,\r\n            formatter: (params) => {\r\n              return TimeFormater(Number(params)).format(\"HH:mm\");\r\n            },\r\n          },\r\n\r\n          splitLine: {\r\n            //网格线\r\n            show: true,\r\n            lineStyle: {\r\n              color: [\"#CCC\"],\r\n              width: 1,\r\n              type: \"dashed\",\r\n            },\r\n          },\r\n          data: this.xTimeScaleList,\r\n        },\r\n        yAxis: {\r\n          min: 0 - this.form.decline,\r\n          max: this.form.increase,\r\n          name: \"价格\",\r\n          type: \"value\",\r\n          //   axisLine: { onZero: false },\r\n          axisLabel: {\r\n            fontSize: 8,\r\n          },\r\n          splitLine: {\r\n            show: true,\r\n            lineStyle: {\r\n              color: [\"#CCC\"],\r\n              width: 1,\r\n              type: \"dashed\",\r\n            },\r\n          },\r\n        },\r\n\r\n        series: [\r\n          {\r\n            data: this.yRandomList,\r\n            type: \"line\",\r\n            smooth: true,\r\n            symbol: \"circle\",\r\n            showSymbol: true,\r\n            symbolSize: 12,\r\n            itemStyle: {\r\n              color: \"#3B91FF\",\r\n            },\r\n            lineStyle: {\r\n              color: \"#3B91FF\",\r\n            },\r\n          },\r\n        ],\r\n      };\r\n      this.lineChart && this.lineChart.setOption(options);\r\n      if (!this.isPriview) {\r\n        this.setLineOption();\r\n      }\r\n    },\r\n    /**\r\n     * 设置拖拽\r\n     */\r\n    setLineOption() {\r\n      this.lineChart.setOption({\r\n        graphic: echarts.util.map(this.yRandomList, (dataItem, dataIndex) => {\r\n          const that = this; // 因为ondrag函数必须在回调内使用this.position获取实时坐标，此处必须用that替换this\r\n          return {\r\n            type: \"circle\",\r\n            shape: {\r\n              // 圆点的半径。\r\n              r: 10,\r\n            },\r\n            style: {\r\n              fill: \"#3B91FF\", // 设置圆点的填充色，这里设置为红色\r\n            },\r\n            position: this.lineChart.convertToPixel(\"grid\", dataItem),\r\n            invisible: true,\r\n            draggable: true,\r\n            z: 100,\r\n            ondrag: echarts.util.curry(function (dataIndex) {\r\n              let origin = that.lineChart.convertToPixel(\r\n                \"grid\",\r\n                that.yRandomList[dataIndex]\r\n              );\r\n              this.position[0] = origin[0]; // 控制每个点位只能在y轴方向移动\r\n              // this.position[1] = origin[1] // 控制每个点位只能在x轴方向移动\r\n              // 实时获取拖动的点位信息并根据此信息重新画图\r\n              let tempData = that.lineChart.convertFromPixel(\r\n                \"grid\",\r\n                this.position\r\n              );\r\n              if (tempData[1] > that.form.increase) {\r\n                tempData[1] = that.form.increase;\r\n              } else if (tempData[1] < 0 - that.form.decline) {\r\n                tempData[1] = 0 - that.form.decline;\r\n              }\r\n              that.yRandomList[dataIndex] = tempData;\r\n\r\n              that.lineChart.setOption({\r\n                series: [\r\n                  {\r\n                    data: that.yRandomList,\r\n                  },\r\n                ],\r\n              });\r\n            }, dataIndex),\r\n            ondragend: function () {\r\n              that.klineYRandomList = getKLineYRandomList(\r\n                that.xTimeScaleList,\r\n                that.yRandomList\r\n              ).slice(0, that.xTimeScaleList.length);\r\n              setTimeout(that.KLinePerview, 300);\r\n              // 拖拽结束时，再次检查位置是否超出范围，如果超出则重置为合法位置\r\n              const origin = that.lineChart.convertToPixel(\r\n                \"grid\",\r\n                that.yRandomList[dataIndex]\r\n              );\r\n              const tempData = that.lineChart.convertFromPixel(\r\n                \"grid\",\r\n                this.position\r\n              );\r\n              if (tempData[1] > that.form.increase) {\r\n                this.position[1] = origin[1];\r\n              } else if (tempData[1] < 0 - that.form.decline) {\r\n                this.position[1] = origin[1];\r\n              }\r\n            },\r\n          };\r\n        }),\r\n      });\r\n    },\r\n    /**\r\n     * 监听大小\r\n     */\r\n    resize() {\r\n      this.lineChart && this.lineChart.resize();\r\n      this.KLineChart && this.KLineChart.resize();\r\n    },\r\n    async getSymbolList() {\r\n      const res = await getSymbolListApi({\r\n        pageNum: 1,\r\n        pageSize: 1000,\r\n      });\r\n      if (res.code == 200) {\r\n        this.symbolList = res.rows;\r\n        this.form.symbol = this.symbolList[0].symbol;\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.line-chart,\r\n.kline-chart {\r\n  height: 800px;\r\n}\r\n</style>\r\n"]}]}