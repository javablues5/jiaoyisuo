{"remainingRequest":"/Users/ying/Downloads/Telegram Desktop/javanew/echo2.0-admin/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/ying/Downloads/Telegram Desktop/javanew/echo2.0-admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/ying/Downloads/Telegram Desktop/javanew/echo2.0-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ying/Downloads/Telegram Desktop/javanew/echo2.0-admin/src/views/bussiness/swapOrder/index.vue?vue&type=template&id=2a814a9c","dependencies":[{"path":"/Users/ying/Downloads/Telegram Desktop/javanew/echo2.0-admin/src/views/bussiness/swapOrder/index.vue","mtime":1698845798712},{"path":"/Users/ying/Downloads/Telegram Desktop/javanew/echo2.0-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ying/Downloads/Telegram Desktop/javanew/echo2.0-admin/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/ying/Downloads/Telegram Desktop/javanew/echo2.0-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ying/Downloads/Telegram Desktop/javanew/echo2.0-admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}