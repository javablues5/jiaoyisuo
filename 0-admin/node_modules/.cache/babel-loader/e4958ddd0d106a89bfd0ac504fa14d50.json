{"remainingRequest":"C:\\Users\\Administrator\\Desktop\\交易所9.27\\0-admin\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\Administrator\\Desktop\\交易所9.27\\0-admin\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Administrator\\Desktop\\交易所9.27\\0-admin\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Administrator\\Desktop\\交易所9.27\\0-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Administrator\\Desktop\\交易所9.27\\0-admin\\src\\views\\bussiness\\basicConfiguration\\index.vue?vue&type=script&lang=js","dependencies":[{"path":"C:\\Users\\Administrator\\Desktop\\交易所9.27\\0-admin\\src\\views\\bussiness\\basicConfiguration\\index.vue","mtime":1698845798000},{"path":"C:\\Users\\Administrator\\Desktop\\交易所9.27\\0-admin\\babel.config.js","mtime":1698845798000},{"path":"C:\\Users\\Administrator\\Desktop\\交易所9.27\\0-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\交易所9.27\\0-admin\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\交易所9.27\\0-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"C:\\Users\\Administrator\\Desktop\\交易所9.27\\0-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\交易所9.27\\0-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}