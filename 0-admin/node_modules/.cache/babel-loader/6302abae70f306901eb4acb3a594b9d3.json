{"remainingRequest":"/Users/ddmac/Downloads/javanew/echo2.0-admin/node_modules/thread-loader/dist/cjs.js!/Users/ddmac/Downloads/javanew/echo2.0-admin/node_modules/babel-loader/lib/index.js!/Users/ddmac/Downloads/javanew/echo2.0-admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/ddmac/Downloads/javanew/echo2.0-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ddmac/Downloads/javanew/echo2.0-admin/src/views/tool/build/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/ddmac/Downloads/javanew/echo2.0-admin/src/views/tool/build/index.vue","mtime":1700759091000},{"path":"/Users/ddmac/Downloads/javanew/echo2.0-admin/babel.config.js","mtime":1698845798000},{"path":"/Users/ddmac/Downloads/javanew/echo2.0-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ddmac/Downloads/javanew/echo2.0-admin/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ddmac/Downloads/javanew/echo2.0-admin/node_modules/babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/ddmac/Downloads/javanew/echo2.0-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ddmac/Downloads/javanew/echo2.0-admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}